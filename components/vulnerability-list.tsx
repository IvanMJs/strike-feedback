"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { RefreshCw, AlertCircle } from "lucide-react"
import { VulnerabilityCard } from "@/components/vulnerability-card"
import { VulnerabilityEditModal } from "@/components/vulnerability-edit-modal"
import { useVulnerabilities } from "@/hooks/use-vulnerabilities"
import type { Vulnerability } from "@/types/vulnerability"

interface VulnerabilityListProps {
  onEdit?: (vulnerability: Vulnerability) => void
}

export function VulnerabilityList({ onEdit }: VulnerabilityListProps) {
  const [editingVulnerability, setEditingVulnerability] = useState<Vulnerability | null>(null)
  
  // Default filter params
  const defaultParams = {
    page: 1,
    limit: 10,
  }
  
  const { data, isLoading, error, refetch } = useVulnerabilities(defaultParams)

  const handleEdit = (vulnerability: Vulnerability) => {
    setEditingVulnerability(vulnerability)
    onEdit?.(vulnerability)
  }

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <div className="space-y-3">
                <Skeleton className="h-6 w-3/4" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-2/3" />
                <div className="flex gap-2">
                  <Skeleton className="h-6 w-20" />
                  <Skeleton className="h-6 w-16" />
                  <Skeleton className="h-6 w-24" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription className="flex items-center justify-between">
          <span>Error loading vulnerabilities: {error.message}</span>
          <Button variant="outline" size="sm" onClick={() => refetch()}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry
          </Button>
        </AlertDescription>
      </Alert>
    )
  }

  const vulnerabilities = data?.data || []

  if (vulnerabilities.length === 0) {
    return (
      <Card>
        <CardContent className="flex flex-col items-center justify-center py-12">
          <div className="text-center">
            <h3 className="text-lg font-medium text-gray-900 mb-2">No vulnerabilities found</h3>              <p className="text-gray-500 mb-4">
                No vulnerabilities have been reported yet. Click &quot;Report Vulnerability&quot; to add the first one.
              </p>
            <Button variant="outline" onClick={() => refetch()}>
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <>
      <div className="space-y-4">
        {vulnerabilities.map((vulnerability) => (
          <VulnerabilityCard key={vulnerability.id} vulnerability={vulnerability} onEdit={handleEdit} />
        ))}
      </div>

      <VulnerabilityEditModal
        vulnerability={editingVulnerability}
        open={!!editingVulnerability}
        onOpenChange={(open) => !open && setEditingVulnerability(null)}
      />
    </>
  )
}

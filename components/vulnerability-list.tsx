"use client"

import { useState, useCallback } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { RefreshCw, AlertCircle } from "lucide-react"
import { VulnerabilityCard } from "@/components/vulnerability-card"
import { VulnerabilityEditModal } from "@/components/vulnerability-edit-modal"
import { VulnerabilityFilters } from "@/components/vulnerability-filters"
import { useVulnerabilities } from "@/hooks/use-vulnerabilities"
import type { Vulnerability } from "@/types/vulnerability"
import type { FilterParams } from "@/lib/validations"

interface VulnerabilityListProps {
  onEdit?: (vulnerability: Vulnerability) => void
}

export function VulnerabilityList({ onEdit }: VulnerabilityListProps) {
  const [editingVulnerability, setEditingVulnerability] = useState<Vulnerability | null>(null)
  
  // Filter state
  const [filters, setFilters] = useState<FilterParams>({
    page: 1,
    limit: 10,
  })
  
  const { data, isLoading, error, refetch } = useVulnerabilities(filters)

  const handleEdit = (vulnerability: Vulnerability) => {
    setEditingVulnerability(vulnerability)
    onEdit?.(vulnerability)
  }

  const handleFiltersChange = useCallback((newFilters: {
    search?: string
    status?: string
    severity?: string
  }) => {
    setFilters(prevFilters => ({
      ...prevFilters,
      ...newFilters,
      page: 1, // Reset to first page when filters change
    }))
  }, []) // Remove filters dependency

  if (isLoading) {
    return (
      <div className="space-y-4">
        {Array.from({ length: 3 }).map((_, i) => (
          <Card key={i}>
            <CardContent className="p-6">
              <div className="space-y-3">
                <Skeleton className="h-6 w-3/4" />
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-2/3" />
                <div className="flex gap-2">
                  <Skeleton className="h-6 w-20" />
                  <Skeleton className="h-6 w-16" />
                  <Skeleton className="h-6 w-24" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertDescription className="flex items-center justify-between">
          <span>Error loading vulnerabilities: {error.message}</span>
          <Button variant="outline" size="sm" onClick={() => refetch()}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Retry
          </Button>
        </AlertDescription>
      </Alert>
    )
  }

  const vulnerabilities = data?.data || []
  const hasActiveFilters = filters.search || filters.status || filters.severity

  if (vulnerabilities.length === 0) {
    return (
      <div className="space-y-6">
        {/* Filters Component */}
        <VulnerabilityFilters
          onFiltersChange={handleFiltersChange}
          currentFilters={filters}
        />
        
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <div className="text-center">
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {hasActiveFilters ? "No vulnerabilities match your filters" : "No vulnerabilities found"}
              </h3>
              <p className="text-gray-500 mb-4">
                {hasActiveFilters 
                  ? "Try adjusting your search criteria or clear the filters to see all vulnerabilities."
                  : "No vulnerabilities have been reported yet. Click \"Report Vulnerability\" to add the first one."
                }
              </p>
              <div className="flex gap-2 justify-center">
                {hasActiveFilters && (
                  <Button 
                    variant="outline" 
                    onClick={() => setFilters({ page: 1, limit: 10 })}
                  >
                    Clear Filters
                  </Button>
                )}
                <Button variant="outline" onClick={() => refetch()}>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Refresh
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Filters Component */}
      <VulnerabilityFilters
        onFiltersChange={handleFiltersChange}
        currentFilters={filters}
      />

      {/* Results Summary */}
      <div className="flex items-center justify-between">
        <p className="text-sm text-gray-600">
          Showing {vulnerabilities.length} of {data?.pagination?.total || 0} vulnerabilities
        </p>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => refetch()}
          className="flex items-center gap-2"
        >
          <RefreshCw className="h-4 w-4" />
          Refresh
        </Button>
      </div>

      {/* Results */}
      <div className="space-y-4">
        {vulnerabilities.map((vulnerability) => (
          <VulnerabilityCard key={vulnerability.id} vulnerability={vulnerability} onEdit={handleEdit} />
        ))}
      </div>

      <VulnerabilityEditModal
        vulnerability={editingVulnerability}
        open={!!editingVulnerability}
        onOpenChange={(open) => !open && setEditingVulnerability(null)}
      />
    </div>
  )
}

"use client"

import { useState, useEffect, useRef } from "react"
import { Search, Filter, X } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent } from "@/components/ui/card"
import { formatStatusDisplay } from "@/lib/enum-utils"
import type { VulnerabilityStatus } from "@/types/vulnerability"
import { useDebounce } from "@/hooks/use-debounce"

interface VulnerabilityFiltersProps {
  onFiltersChange: (filters: {
    search?: string
    status?: string
    severity?: string
  }) => void
  currentFilters: {
    search?: string
    status?: string
    severity?: string
  }
}

export function VulnerabilityFilters({ onFiltersChange, currentFilters }: VulnerabilityFiltersProps) {
  const [searchValue, setSearchValue] = useState(currentFilters.search || "")
  const debouncedSearch = useDebounce(searchValue, 300)
  const previousDebouncedSearch = useRef<string>(currentFilters.search || "")

  // Update search filter when debounced value changes
  useEffect(() => {
    if (debouncedSearch !== previousDebouncedSearch.current) {
      previousDebouncedSearch.current = debouncedSearch
      onFiltersChange({
        search: debouncedSearch || undefined,
        status: currentFilters.status,
        severity: currentFilters.severity,
      })
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedSearch])

  const handleStatusChange = (status: string) => {
    onFiltersChange({
      ...currentFilters,
      status: status === "all" ? undefined : status,
    })
  }

  const handleSeverityChange = (severity: string) => {
    onFiltersChange({
      ...currentFilters,
      severity: severity === "all" ? undefined : severity,
    })
  }

  const clearFilters = () => {
    setSearchValue("")
    onFiltersChange({})
  }

  const hasActiveFilters = currentFilters.search || currentFilters.status || currentFilters.severity

  return (
    <Card className="mb-6">
      <CardContent className="pt-6">
        <div className="flex flex-col gap-4">
          {/* Search Input */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search vulnerabilities by title, description, or CWE..."
              value={searchValue}
              onChange={(e) => setSearchValue(e.target.value)}
              className="pl-10"
            />
          </div>

          {/* Filter Row */}
          <div className="flex flex-wrap gap-4 items-center">
            <div className="flex items-center gap-2">
              <Filter className="h-4 w-4 text-gray-600" />
              <span className="text-sm font-medium text-gray-700">Filters:</span>
            </div>

            {/* Status Filter */}
            <div className="flex flex-col gap-1">
              <label className="text-xs text-gray-600">Status</label>
              <Select value={currentFilters.status || "all"} onValueChange={handleStatusChange}>
                <SelectTrigger className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="PENDING_FIX">Pending Fix</SelectItem>
                  <SelectItem value="IN_PROGRESS">In Progress</SelectItem>
                  <SelectItem value="SOLVED">Solved</SelectItem>
                  <SelectItem value="FALSE_POSITIVE">False Positive</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Severity Filter */}
            <div className="flex flex-col gap-1">
              <label className="text-xs text-gray-600">Severity</label>
              <Select value={currentFilters.severity || "all"} onValueChange={handleSeverityChange}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severity</SelectItem>
                  <SelectItem value="CRITICAL">Critical</SelectItem>
                  <SelectItem value="HIGH">High</SelectItem>
                  <SelectItem value="MEDIUM">Medium</SelectItem>
                  <SelectItem value="LOW">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Clear Filters */}
            {hasActiveFilters && (
              <Button
                variant="outline"
                size="sm"
                onClick={clearFilters}
                className="flex items-center gap-2"
              >
                <X className="h-4 w-4" />
                Clear Filters
              </Button>
            )}
          </div>

          {/* Active Filters Display */}
          {hasActiveFilters && (
            <div className="flex flex-wrap gap-2">
              {currentFilters.search && (
                <Badge variant="secondary" className="flex items-center gap-1">
                  Search: &ldquo;{currentFilters.search}&rdquo;
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => {
                      setSearchValue("")
                      onFiltersChange({ ...currentFilters, search: undefined })
                    }}
                  />
                </Badge>
              )}
              {currentFilters.status && (
                <Badge variant="secondary" className="flex items-center gap-1">
                  Status: {formatStatusDisplay(currentFilters.status as VulnerabilityStatus)}
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => onFiltersChange({ ...currentFilters, status: undefined })}
                  />
                </Badge>
              )}
              {currentFilters.severity && (
                <Badge variant="secondary" className="flex items-center gap-1">
                  Severity: {currentFilters.severity}
                  <X
                    className="h-3 w-3 cursor-pointer"
                    onClick={() => onFiltersChange({ ...currentFilters, severity: undefined })}
                  />
                </Badge>
              )}
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

"use client"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import { AlertTriangle, CheckCircle, Clock, Edit, MoreHorizontal, Shield, Trash2, User, XCircle } from "lucide-react"
import { useState } from "react"
import { useUpdateVulnerability, useDeleteVulnerability } from "@/hooks/use-vulnerabilities"
import type { Vulnerability, VulnerabilityStatus } from "@/types/vulnerability"
import { formatSeverityDisplay, formatStatusDisplay, STATUS_OPTIONS } from "@/lib/enum-utils"

interface VulnerabilityCardProps {
  vulnerability: Vulnerability
  onEdit: (vulnerability: Vulnerability) => void
}

export function VulnerabilityCard({ vulnerability, onEdit }: VulnerabilityCardProps) {
  const [showDeleteDialog, setShowDeleteDialog] = useState(false)
  const updateMutation = useUpdateVulnerability()
  const deleteMutation = useDeleteVulnerability()

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "CRITICAL":
        return "bg-red-100 text-red-800 border-red-200"
      case "HIGH":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "MEDIUM":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "LOW":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getStatusColor = (status: VulnerabilityStatus) => {
    switch (status) {
      case "PENDING_FIX":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "IN_PROGRESS":
        return "bg-blue-100 text-blue-800 border-blue-200"
      case "SOLVED":
        return "bg-green-100 text-green-800 border-green-200"
      case "FALSE_POSITIVE":
        return "bg-gray-100 text-gray-800 border-gray-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getStatusIcon = (status: VulnerabilityStatus) => {
    switch (status) {
      case "PENDING_FIX":
        return <Clock className="h-4 w-4" />
      case "IN_PROGRESS":
        return <AlertTriangle className="h-4 w-4" />
      case "SOLVED":
        return <CheckCircle className="h-4 w-4" />
      case "FALSE_POSITIVE":
        return <XCircle className="h-4 w-4" />
      default:
        return <Clock className="h-4 w-4" />
    }
  }

  const handleStatusChange = (newStatus: VulnerabilityStatus) => {
    if (newStatus === vulnerability.status) return
    updateMutation.mutate({ id: vulnerability.id, data: { status: newStatus } })
  }

  const handleDelete = () => {
    deleteMutation.mutate(vulnerability.id, {
      onSuccess: () => setShowDeleteDialog(false),
    })
  }

  return (
    <>
      <Card className="hover:shadow-md transition-shadow">
        <CardHeader>
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <CardTitle className="text-lg mb-2">{vulnerability.title}</CardTitle>
              <CardDescription className="text-sm line-clamp-2">{vulnerability.description}</CardDescription>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="ml-4">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => onEdit(vulnerability)}>
                  <Edit className="h-4 w-4 mr-2" />
                  Edit
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowDeleteDialog(true)} className="text-red-600 focus:text-red-600">
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          <div className="flex flex-wrap gap-2 mt-4">
            <Badge className={getSeverityColor(vulnerability.severity)}>
              <Shield className="h-3 w-3 mr-1" />
              {formatSeverityDisplay(vulnerability.severity)}
            </Badge>
            {vulnerability.cwe && <Badge variant="outline">{vulnerability.cwe}</Badge>}
            <Badge variant="outline">CVSS: {vulnerability.cvssScore}</Badge>
          </div>
        </CardHeader>

        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
            <div>
              <p className="text-sm font-medium text-gray-500 mb-1">Reporter</p>
              <div className="flex items-center text-sm">
                <User className="h-4 w-4 mr-1 text-gray-400" />
                {vulnerability.reporter || "Unassigned"}
              </div>
            </div>

            <div>
              <p className="text-sm font-medium text-gray-500 mb-1">Assignee</p>
              <div className="flex items-center text-sm">
                <User className="h-4 w-4 mr-1 text-gray-400" />
                {vulnerability.assignee || "Unassigned"}
              </div>
            </div>

            <div>
              <p className="text-sm font-medium text-gray-500 mb-1">Created</p>
              <p className="text-sm">{vulnerability.dateCreated}</p>
            </div>

            <div>
              <p className="text-sm font-medium text-gray-500 mb-1">Updated</p>
              <p className="text-sm">{vulnerability.dateUpdated}</p>
            </div>
          </div>

          {vulnerability.affectedSystems.length > 0 && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-500 mb-2">Affected Systems</p>
              <div className="flex flex-wrap gap-1">
                {vulnerability.affectedSystems.map((system) => (
                  <Badge key={system} variant="secondary" className="text-xs">
                    {system}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {vulnerability.suggestedFix && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-500 mb-1">Suggested Fix</p>
              <p className="text-sm text-gray-700 line-clamp-3">{vulnerability.suggestedFix}</p>
            </div>
          )}

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Badge className={getStatusColor(vulnerability.status)}>
                {getStatusIcon(vulnerability.status)}
                <span className="ml-1">{formatStatusDisplay(vulnerability.status)}</span>
              </Badge>
            </div>

            <Select value={vulnerability.status} onValueChange={handleStatusChange} disabled={updateMutation.isPending}>
              <SelectTrigger className="w-40">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {STATUS_OPTIONS.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the vulnerability &quot;{vulnerability.title}&quot; and
              remove all associated data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              disabled={deleteMutation.isPending}
              className="bg-red-600 hover:bg-red-700"
            >
              {deleteMutation.isPending ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  )
}

"use client"

import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Loader2, X, Plus } from "lucide-react"
import { vulnerabilitySchema, type VulnerabilityFormData } from "@/lib/validations"
import type { Vulnerability } from "@/types/vulnerability"
import { CWESelector } from "@/components/cwe-selector"
import { SEVERITY_OPTIONS, STATUS_OPTIONS, formatSeverityDisplay } from "@/lib/enum-utils"

interface VulnerabilityFormProps {
  vulnerability?: Vulnerability
  onSubmit: (data: VulnerabilityFormData) => void
  isSubmitting?: boolean
  submitButtonText?: string
}

export function VulnerabilityForm({
  vulnerability,
  onSubmit,
  isSubmitting = false,
  submitButtonText = "Submit",
}: VulnerabilityFormProps) {
  const [affectedSystems, setAffectedSystems] = useState<string[]>(
    vulnerability?.affectedSystems || [""]
  )

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: vulnerability || {
      title: "",
      description: "",
      severity: "MEDIUM" as const,
      cwe: "",
      cvssScore: 0,
      affectedSystems: [],
      suggestedFix: "",
      reporter: "",
      assignee: "",
      status: "PENDING_FIX" as const,
    },
  })

  const handleSubmitWithSystems = (data: VulnerabilityFormData) => {
    const filteredSystems = affectedSystems.filter(system => system.trim() !== "")
    onSubmit({ ...data, affectedSystems: filteredSystems })
  }

  const addSystem = () => {
    setAffectedSystems([...affectedSystems, ""])
  }

  const removeSystem = (index: number) => {
    const newSystems = affectedSystems.filter((_, i) => i !== index)
    setAffectedSystems(newSystems.length > 0 ? newSystems : [""])
  }

  const updateSystem = (index: number, value: string) => {
    const newSystems = [...affectedSystems]
    newSystems[index] = value
    setAffectedSystems(newSystems)
  }

  const severity = watch("severity")
  const cwe = watch("cwe")

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "CRITICAL":
        return "bg-red-100 text-red-800 border-red-200"
      case "HIGH":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "MEDIUM":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "LOW":
        return "bg-green-100 text-green-800 border-green-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  return (
    <form onSubmit={handleSubmit(handleSubmitWithSystems)} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Title */}
        <div className="md:col-span-2">
          <Label htmlFor="title">
            Title <span className="text-red-500">*</span>
          </Label>
          <Input
            id="title"
            {...register("title")}
            placeholder="Brief description of the vulnerability"
            className={errors.title ? "border-red-500" : ""}
          />
          {errors.title && <p className="text-sm text-red-500 mt-1">{errors.title.message}</p>}
        </div>

        {/* Description */}
        <div className="md:col-span-2">
          <Label htmlFor="description">
            Description <span className="text-red-500">*</span>
          </Label>
          <Textarea
            id="description"
            {...register("description")}
            placeholder="Detailed description of the vulnerability, including impact and attack vectors"
            rows={4}
            className={errors.description ? "border-red-500" : ""}
          />
          {errors.description && <p className="text-sm text-red-500 mt-1">{errors.description.message}</p>}
        </div>

        {/* Severity */}
        <div>
          <Label htmlFor="severity">
            Severity <span className="text-red-500">*</span>
          </Label>
          <Select value={severity} onValueChange={(value) => setValue("severity", value as VulnerabilityFormData["severity"])}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {SEVERITY_OPTIONS.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <div className="mt-2">
            <Badge className={getSeverityColor(severity)}>{formatSeverityDisplay(severity)}</Badge>
          </div>
        </div>

        {/* CWE */}
        <div>
          <Label htmlFor="cwe">CWE (Common Weakness Enumeration)</Label>
          <CWESelector value={cwe || ""} onChange={(value) => setValue("cwe", value)} />
        </div>

        {/* CVSS Score */}
        <div>
          <Label htmlFor="cvssScore">CVSS Score (0-10)</Label>
          <Input
            id="cvssScore"
            type="number"
            min="0"
            max="10"
            step="0.1"
            {...register("cvssScore", { valueAsNumber: true })}
            placeholder="0.0"
            className={errors.cvssScore ? "border-red-500" : ""}
          />
          {errors.cvssScore && <p className="text-sm text-red-500 mt-1">{errors.cvssScore.message}</p>}
        </div>

        {/* Status */}
        <div>
          <Label htmlFor="status">Status</Label>
          <Select value={watch("status")} onValueChange={(value) => setValue("status", value as VulnerabilityFormData["status"])}>
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {STATUS_OPTIONS.map((option) => (
                <SelectItem key={option.value} value={option.value}>
                  {option.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Affected Systems */}
        <div className="md:col-span-2">
          <Label>Affected Systems</Label>
          <div className="space-y-2">
            {affectedSystems.map((system, index) => (
              <div key={index} className="flex gap-2">
                <Input
                  value={system}
                  onChange={(e) => updateSystem(index, e.target.value)}
                  placeholder="e.g., Web Application, API, Database"
                />
                <Button type="button" variant="outline" size="sm" onClick={() => removeSystem(index)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={addSystem}
              className="flex items-center gap-2"
            >
              <Plus className="h-4 w-4" />
              Add System
            </Button>
          </div>
        </div>

        {/* Suggested Fix */}
        <div className="md:col-span-2">
          <Label htmlFor="suggestedFix">Suggested Fix/Remediation</Label>
          <Textarea
            id="suggestedFix"
            {...register("suggestedFix")}
            placeholder="Recommended steps to fix this vulnerability"
            rows={3}
          />
        </div>

        {/* Reporter */}
        <div>
          <Label htmlFor="reporter">Reporter</Label>
          <Input id="reporter" {...register("reporter")} placeholder="Who reported this vulnerability" />
        </div>

        {/* Assignee */}
        <div>
          <Label htmlFor="assignee">Assignee</Label>
          <Input id="assignee" {...register("assignee")} placeholder="Who is responsible for fixing this" />
        </div>
      </div>

      <div className="flex justify-end gap-3 pt-6 border-t">
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
          {submitButtonText}
        </Button>
      </div>
    </form>
  )
}

"use client"

import React, { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { VulnerabilityForm } from "@/components/vulnerability-form"
import { useCreateVulnerability } from "@/hooks/use-vulnerabilities"
import type { VulnerabilityFormData } from "@/lib/validations"

interface VulnerabilityCreateModalProps {
  isOpen?: boolean
  onClose?: () => void
}

export function VulnerabilityCreateModal({ isOpen, onClose }: VulnerabilityCreateModalProps) {
  const [open, setOpen] = useState(isOpen || false)
  const createMutation = useCreateVulnerability()

  // Sync external state with internal state
  useEffect(() => {
    setOpen(isOpen || false)
  }, [isOpen])

  const handleOpenChange = (newOpen: boolean) => {
    setOpen(newOpen)
    if (!newOpen && onClose) {
      onClose()
    }
  }

  const handleSubmit = (data: VulnerabilityFormData) => {
    createMutation.mutate(data, {
      onSuccess: () => {
        setOpen(false)
        onClose?.()
      },
    })
  }

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Create New Vulnerability</DialogTitle>
          <DialogDescription>
            Add a new security vulnerability to track and manage through its lifecycle.
          </DialogDescription>
        </DialogHeader>
        <VulnerabilityForm
          onSubmit={handleSubmit}
          isSubmitting={createMutation.isPending}
          submitButtonText="Create Vulnerability"
        />
      </DialogContent>
    </Dialog>
  )
}
